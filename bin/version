#!/usr/bin/env bash

P=${BASH_SOURCE%/*}

. $P/colors
. $P/taskrunner

current_version=$(node -p "require('$P/../package.json').version")
versions=(${current_version//+/ })
build=${versions[1]}
bumped_build=$(($build+1))
default=${versions[0]}+$bumped_build
bump=false

while getopts 'abf:v' flag; do
  case "${flag}" in
    b) bump=true ;;
    *) exit 1 ;;
  esac
done

if $bump
then
  green "! "
  bold "Bumping to $default"
  echo
  confirm="y"
  new_version=$default
fi

while [[ ! $confirm == [yY] ]]; do
  warning=0
  while [[ ! $new_version =~ ^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\+[0-9]{1,2}$ ]]; do
    if [[ $warning == 1 ]]; then red "Error: version must use semver format \"major.minor.patch+build\"\n"; fi
    green "? "
    bold "Enter a new version (current is $current_version): "
    dark "[$default] "
    read -r new_version
    new_version=${new_version:-$default}
    warning=1
  done
  green "? "
  bold "Is $new_version correct?"
  light " (Y/N)"
  bold ":"
  read -n 1 -r confirm
  echo
  if [[ $confirm == [nN] ]]
  then
    unset new_version
  elif [[ ! $confirm == [yY] ]]
  then
    red "Answer Y or N\n";
  fi
done

sed -E -i '' "s/versionName \"[^\"]+\"/versionName \"$new_version\"/g" $P/../android/app/build.gradle
sed -E -i '' "s/versionCode generateVersionCode(.+)/versionCode generateVersionCode(\"$new_version\")/g" $P/../android/app/build.gradle & taskStart "Updating build.gradle"
taskDone "Updating build.gradle"

sed -E -i '' "s/\"version\": \"[^\"]+\"/\"version\": \"$new_version\"/g" $P/../package.json & taskStart "Updating package.json"
taskDone "Updating package.json"
